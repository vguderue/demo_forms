{"version":3,"sources":["webpack:///webpack/bootstrap aa5c291d9db5cdfe76c5","webpack:///../src/mi18n.js"],"names":[],"mappings":";;;;;0BACA,cAMA,MACA,eAGA,mBACA,GACA,EACA,KAIA,mDAGA,KAGA,OACA,OAIA,IAzBA,iBA4BA,MAGA,iBAA2C,OAAc,EAGzD,qBACA,OACA,8BACA,CACA,gBACA,kBAGA,GAGA,iBACA,YACA,qBAA2B,UAA0B,UACrD,YAAiC,OAAe,EAChD,mBACA,GACA,CAGA,mBAAsD,+CAA+D,EAGrH,MAGA,maC9DA,mfAGM,YAKJ,CAAY,YAAS,mBACnB,MAAI,GACA,WAEA,iBAEA,eAGA,uBACA,QAQJ,mBAAK,KAAO,WACV,GAAK,OAAS,OAAc,UAAI,EAEhC,KAAK,MAAQ,OAAc,UAAI,EAAK,OACpC,aAAK,OAAS,EAAK,OAAO,QAAU,EAAK,OAAO,MAEhD,KAAK,WAAW,EACjB,OACF,CAGD,oBAKA,SAAS,WACP,OAAQ,MAAK,SAAW,KAAK,QAAQ,IACtC,CAED,cAKA,SAAS,WACP,IAMA,4CAAM,EAAI,QAAQ,YAAa,kBAAW,GAAO,EAEjD,GAAO,GAAI,QAAO,EACnB,IAED,cAMA,IAAS,aACP,OAAO,MAAK,QAAQ,GACrB,CAED,cAMA,IAAS,aACP,IAKA,GALI,EACJ,KAAI,EAAQ,KAAK,SACjB,GAAI,EAAS,EAAM,MACnB,mBAEI,GACF,KAAI,+BAAoB,iBACtB,QAAK,GAAI,GAAI,EAAG,EAAI,EAAO,OACzB,MAAQ,EAAO,GAAG,UAAU,EAAG,EAAO,GAAG,OACzC,KAAQ,EAAM,QAAQ,EAAM,SAAS,EAAO,IAAK,EAAK,IAGxD,WAAQ,EAAM,QAAQ,eAI1B,SACD,EAED,cAKA,SAAS,WACP,KAGK,GAAI,GAHH,EAAQ,EAAQ,MACtB,MAEA,KAAkB,EAAI,EAAG,EAAI,EAAM,OACjC,SAAU,EAAM,GAAG,MACnB,yBAAI,EACF,IAAI,GAAQ,EAAQ,GAAG,QAAQ,YAC/B,MAAK,EAAQ,IACd,CAGH,OACD,EAED,cAKA,YAAY,WACV,IAAI,GAAU,EAAS,QAAQ,QAC/B,YAAO,MAAK,SACb,EAED,cAKA,SAAS,WACP,IAAI,GACJ,WAAO,IAAI,SAA0B,aACnC,IAAI,EAAM,MACR,KAAQ,EAAM,MACf,QACC,IAAI,GAAM,GACV,gBAAI,EAAW,EAAM,OAAO,SAAW,EAAS,EAAM,OACtD,YAAI,KAAK,MACT,QAAI,OAAS,UACX,IAAmB,GAAf,OAAK,OACP,IAAI,GAAgB,EAAM,YAAY,EACtC,gBAAM,MAAM,GACZ,IACD,EACC,QACE,QAAQ,KACR,kBAAY,EAGjB,YACD,IAAI,QAAU,UACZ,GACE,QAAQ,KACR,kBAAY,EAEf,YACD,IACD,MACF,CACF,EAUD,cAKM,sEAAW,0DAAS,uGAClB,KAAK,SAAS,OAEpB,eAAK,OACL,OAAK,QAAU,KAAK,MAAM,qBAEnB,KAAK,gJAdZ,OAAO,MAAK,OACb,WAkBH,iBAAe,GAAI","file":"mi18n.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aa5c291d9db5cdfe76c5","// import 'babel-regenerator-runtime';\n\n/**\n * Main mi18n class.\n */\nclass I18N {\n  /**\n   * Process options and start the module\n   * @param {Object} options\n   */\n  constructor(options) {\n    let defaultConfig = {\n        extension: '.lang',\n        // local or remote directory containing language files\n        location: 'assets/lang/',\n        // list of available locales, handy for populating selector.\n        langs: [\n          'en-US'\n        ],\n        locale: 'en-US', // init with user's preferred language\n        preloaded: {}\n      };\n\n    /**\n     * Load language and set default\n     * @param  {Object} options\n     * @return {Promise}        resolves language\n     */\n    this.init = options => {\n      this.config = Object.assign({}, defaultConfig, options);\n\n      this.langs = Object.assign({}, this.config.preloaded);\n      this.locale = this.config.locale || this.config.langs[0];\n\n      this.setCurrent(this.locale);\n    };\n  }\n\n\n  /**\n   * get a string from a loaded language file\n   * @param  {String} key  - the key for the string we are trying to retrieve\n   * @return {String}      - correct language string\n   */\n  getValue(key) {\n    return (this.current && this.current[key]) || key;\n  }\n\n  /**\n   * Escape variable syntax\n   * @param  {String} str\n   * @return {String}     escaped str\n   */\n  makeSafe(str) {\n    const mapObj = {\n      '{': '\\\\{',\n      '}': '\\\\}',\n      '|': '\\\\|'\n    };\n\n    str = str.replace(/\\{|\\}|\\|/g, matched => mapObj[matched]);\n\n    return new RegExp(str, 'g');\n  }\n\n  /**\n  * Temporarily put a string into the currently loaded language\n  * @param  {String} key\n  * @param  {String} string\n  * @return {String} string in current language\n  */\n  put(key, string) {\n    return this.current[key] = string;\n  }\n\n  /**\n   * Parse arguments for the requested string\n   * @param  {String} key  the key we use to lookup our translation\n   * @param  {multi}  args  string, number or object containing our arguments\n   * @return {String}      updated string translation\n   */\n  get(key, args) {\n    let _this = this;\n    let value = this.getValue(key);\n    let tokens = value.match(/\\{[^\\}]+?\\}/g);\n    let token;\n\n    if (args && tokens) {\n      if ('object' === typeof args) {\n        for (let i = 0; i < tokens.length; i++) {\n          token = tokens[i].substring(1, tokens[i].length - 1);\n          value = value.replace(_this.makeSafe(tokens[i]), args[token] || '');\n        }\n      } else {\n        value = value.replace(/\\{[^\\}]+?\\}/g, args);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Turn raw text from the language files into fancy JSON\n   * @param  {String} rawText\n   * @return {Object} converted language file\n   */\n  fromFile(rawText) {\n    const lines = rawText.split('\\n');\n    let lang = {};\n\n    for (let matches, i = 0; i < lines.length; i++) {\n      matches = lines[i].match(/^(.+?) *?= *?([^\\n]+)/);\n      if (matches) {\n        let value = matches[2].replace(/^\\s+|\\s+$/, '');\n        lang[matches[1]] = value;\n      }\n    }\n\n    return lang;\n  }\n\n  /**\n   * Remove double carriage returns\n   * @param  {Object} response\n   * @return {Object}          processed language\n   */\n  processFile(response) {\n    let rawText = response.replace(/\\n\\n/g, '\\n');\n    return this.fromFile(rawText);\n  }\n\n  /**\n   * Load a remotely stored language file\n   * @param  {String} locale\n   * @return {Promise}       resolves response\n   */\n  loadLang(locale) {\n    let _this = this;\n    return new Promise(function(resolve, reject) {\n      if (_this.langs[locale]) {\n        resolve(_this.langs[locale]);\n      } else {\n        let xhr = new XMLHttpRequest();\n        let langFile = _this.config.location + locale + _this.config.extension;\n        xhr.open('GET', langFile, true);\n        xhr.onload = function() {\n          if (this.status <= 304) {\n            let processedFile = _this.processFile(xhr.responseText);\n            _this.langs[locale] = processedFile;\n            resolve(processedFile);\n          } else {\n            reject({\n              status: this.status,\n              statusText: xhr.statusText\n            });\n          }\n        };\n        xhr.onerror = function() {\n          reject({\n            status: this.status,\n            statusText: xhr.statusText\n          });\n        };\n        xhr.send();\n      }\n    });\n  }\n\n  /**\n   * return currently available languages\n   * @return {Object} all configured languages\n   */\n  get getLangs() {\n    return this.config.langs;\n  }\n\n  /**\n   * Attempt to set the current language to the local provided\n   * @param {String}   locale\n   * @return {Promise} language\n   */\n  async setCurrent(locale = 'en-US') {\n    await this.loadLang(locale);\n\n    this.locale = locale;\n    this.current = this.langs[locale];\n\n    return this.current;\n  }\n\n}\n\nexport default new I18N();\n\n\n\n// WEBPACK FOOTER //\n// ../src/mi18n.js"],"sourceRoot":""}